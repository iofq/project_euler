'''


The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

'''
#find prime factors
def f(n):
    i = 2
    factors = []
    while i * i < n: #i < sqrt(n)
        if n % i == 0:
            factors.append(i)
            n = n / i
        else:
            i += 1
    factors.append(n) #remainder should also be a prime
    return factors

#generate first n triangle numbers
#not very comp intensive so we can overestimate
def gen_triangles(n):
    triangle = [1]
    i = 1
    while i <= n:
        i += 1
        triangle.append(triangle[-1] + i)
    return triangle

# for n = a^y * b*x, n's # of divisors is (y+1)(x+1)
def calc_divisors(n): #n is an array of prime factors
    poly = []
    num_divisors = 1
    for factor in n:
        poly.append(n.count(factor) + 1) # we only care about exponent
        n = [ i for i in n if i != factor ] #remove all occurances from list
    for p in poly:
        num_divisors *= p
    return num_divisors

def iter(n=500, tri=99999):
  for i in gen_triangles(tri):
    if calc_divisors(f(i)) >= n:
      return i
  print("none found, try a high tri= value")
